// <auto-generated />
using System;
using DMS.Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMS.Infrastructure.Migrations
{
    [DbContext(typeof(DMSContext))]
    [Migration("20251016205034_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DMS.Domain.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TotalSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComputedColumnSql("[FName] + ' ' + [LName] ", true);

                    b.Property<string>("WorkSpaceName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorkSpaceName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            Address = "Cairo",
                            ConcurrencyStamp = "b7c1a4d2-8b23-4b12-b5b4-abcdefabcdef",
                            CreatedAt = new DateTime(2025, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmed@example.com",
                            EmailConfirmed = true,
                            FName = "Ahmed",
                            IsLocked = false,
                            LName = "Fergany",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@EXAMPLE.COM",
                            NormalizedUserName = "AHMED.FERGANY",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJrDwU8NV1Kx9oW8Gc+UgFTpj6qTr7mk0bh7eEXMHcbIuhcw/JW3v9s5pr7oNV8IQ==",
                            PhoneNumber = "01000000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e3c1c6d2-9d48-4a90-a9a4-1234567890ab",
                            TwoFactorEnabled = false,
                            UserName = "ahmed.fergany",
                            WorkSpaceName = "AhmedWorkspace"
                        },
                        new
                        {
                            Id = "user-2",
                            AccessFailedCount = 0,
                            Address = "Alex",
                            ConcurrencyStamp = "f0d3e78b-4c8f-464e-b78f-e3b56c1487cc",
                            CreatedAt = new DateTime(2025, 10, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mahmoud@example.com",
                            EmailConfirmed = true,
                            FName = "Mahmoud",
                            IsLocked = false,
                            LName = "Badr",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAHMOUD@EXAMPLE.COM",
                            NormalizedUserName = "MAHMOUD.BADR",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJrDwU8NV1Kx9oW8Gc+UgFTpj6qTr7mk0bh7eEXMHcbIuhcw/JW3v9s5pr7oNV8IQ==",
                            PhoneNumber = "01000000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6d89f59e-bbfa-49d0-8e2e-a1b1e872e24d",
                            TwoFactorEnabled = false,
                            UserName = "mahmoud.badr",
                            WorkSpaceName = "MahmoudWorkspace"
                        },
                        new
                        {
                            Id = "user-3",
                            AccessFailedCount = 0,
                            Address = "Menofyia",
                            ConcurrencyStamp = "ab21854a-bbdf-4342-a86c-421c1d932f28",
                            CreatedAt = new DateTime(2025, 10, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "abdo@example.com",
                            EmailConfirmed = true,
                            FName = "Abdo",
                            IsLocked = false,
                            LName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABDO@EXAMPLE.COM",
                            NormalizedUserName = "ABDO.AHMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJrDwU8NV1Kx9oW8Gc+UgFTpj6qTr7mk0bh7eEXMHcbIuhcw/JW3v9s5pr7oNV8IQ==",
                            PhoneNumber = "01000000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a6bdc263-9d47-4fd8-b929-101e1a99d9af",
                            TwoFactorEnabled = false,
                            UserName = "abdo.ahmed",
                            WorkSpaceName = "AbdoWorkspace"
                        });
                });

            modelBuilder.Entity("DMS.Domain.Models.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FolderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Documents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "doc-1",
                            AddedAt = new DateTime(2025, 10, 3, 12, 50, 0, 0, DateTimeKind.Utc),
                            FilePath = "/files/sample.pdf",
                            FileType = "pdf",
                            FolderId = "folder-child",
                            IsDeleted = false,
                            IsStarred = false,
                            Name = "SampleDoc",
                            Size = 1024
                        });
                });

            modelBuilder.Entity("DMS.Domain.Models.Folder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentFolderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "folder-root",
                            AddedAt = new DateTime(2025, 10, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsStarred = false,
                            Name = "Root Folder",
                            OwnerId = "user-2"
                        },
                        new
                        {
                            Id = "folder-child",
                            AddedAt = new DateTime(2025, 10, 3, 12, 5, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsStarred = false,
                            Name = "Child Folder",
                            OwnerId = "user-2",
                            ParentFolderId = "folder-root"
                        });
                });

            modelBuilder.Entity("DMS.Domain.Models.SharedItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FolderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SharedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedWithUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FolderId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("SharedItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "share-1",
                            AddedAt = new DateTime(2025, 10, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            FolderId = "folder-child",
                            PermissionLevel = "Read",
                            SharedByUserId = "user-2",
                            SharedWithUserId = "user-3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "role-user",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user-1",
                            RoleId = "role-admin"
                        },
                        new
                        {
                            UserId = "user-2",
                            RoleId = "role-user"
                        },
                        new
                        {
                            UserId = "user-3",
                            RoleId = "role-user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DMS.Domain.Models.Document", b =>
                {
                    b.HasOne("DMS.Domain.Models.Folder", "Folder")
                        .WithMany("Documents")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("DMS.Domain.Models.Folder", b =>
                {
                    b.HasOne("DMS.Domain.Models.AppUser", "Owner")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Domain.Models.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId");

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("DMS.Domain.Models.SharedItem", b =>
                {
                    b.HasOne("DMS.Domain.Models.Document", "Document")
                        .WithMany("SharedDocument")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DMS.Domain.Models.Folder", "Folder")
                        .WithMany("SharedFolders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DMS.Domain.Models.AppUser", "SharedByUser")
                        .WithMany("SharedItems")
                        .HasForeignKey("SharedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DMS.Domain.Models.AppUser", "SharedWithUser")
                        .WithMany("ReceivedSharedItems")
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Folder");

                    b.Navigation("SharedByUser");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DMS.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DMS.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DMS.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMS.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("ReceivedSharedItems");

                    b.Navigation("SharedItems");
                });

            modelBuilder.Entity("DMS.Domain.Models.Document", b =>
                {
                    b.Navigation("SharedDocument");
                });

            modelBuilder.Entity("DMS.Domain.Models.Folder", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("SharedFolders");

                    b.Navigation("SubFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
